@model IEnumerable<Contracts.DTOs.ProductDto>
@{
    ViewData["Title"] = "PII Obfuscation Portal - Products";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-3">PII Obfuscation Portal</h1>

            <!-- KPI Row -->
            <div class="row g-3 mb-3">
                <div class="col-sm-6 col-lg-3">
                    <div class="card shadow-sm kpi-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="kpi-label">Products</div>
                                    <div class="kpi-value">@Model.Count()</div>
                                </div>
                                <i class="bi bi-box-seam fs-3 text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                    <div class="card shadow-sm kpi-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="kpi-label">Active</div>
                                    <div class="kpi-value">@Model.Count(p => p.IsActive)</div>
                                </div>
                                <i class="bi bi-check-circle fs-3 text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                    <div class="card shadow-sm kpi-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="kpi-label">Technologies</div>
                                    <div class="kpi-value">@Model.Select(p => p.DatabaseTechnology).Distinct().Count()</div>
                                </div>
                                <i class="bi bi-cpu fs-3 text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                    <div class="card shadow-sm kpi-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="kpi-label">Last updated</div>
                                    <div class="kpi-value">@Model.Max(p => p.UpdatedAt).ToString("MMM dd, yyyy")</div>
                                </div>
                                <i class="bi bi-clock-history fs-3 text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            @if (ViewBag.Error != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ViewBag.Error
                </div>
            }
            
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h2 class="mb-0">Products</h2>
                <div class="btn-group">
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#addProductModal">Add product</button>
                    <a class="btn btn-outline-secondary btn-sm" href="#">Bulk import</a>
                </div>
            </div>

            @if (Model != null && Model.Any())
            {
                <div class="row g-3">
                    @foreach (var product in Model)
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="card h-100 shadow-sm product-card">
                                <div class="card-body d-flex flex-column">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <div>
                                            <h5 class="card-title mb-1">@product.Name</h5>
                                            <small class="text-muted">@product.DatabaseTechnology</small>
                                        </div>
                                        <span class="badge @(product.IsActive ? "bg-success" : "bg-secondary")">@(product.IsActive ? "Active" : "Inactive")</span>
                                    </div>
                                    <p class="card-text text-muted flex-grow-1">@(product.Description ?? "No description")</p>
                                    <div class="d-flex justify-content-between align-items-center small text-muted mb-2">
                                        <span>Created: @product.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        <span>Updated: @product.UpdatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    <div class="btn-toolbar gap-2 mt-auto">
                                        <a href="@Url.Action("ProductMappings", "Home", new { id = product.Id })" class="btn btn-primary btn-sm">
                                            <i class="bi bi-diagram-3"></i> Mappings
                                        </a>
                                        <button class="btn btn-outline-secondary btn-sm btn-test-conn" data-id="@product.Id" @(string.IsNullOrWhiteSpace(product.ConnectionString) ? "disabled" : null)>
                                            <i class="bi bi-plug"></i> Test connection
                                        </button>
                                        <a href="#" class="btn btn-outline-secondary btn-sm">
                                            <i class="bi bi-gear"></i> Configure
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">No products found.</p>
                </div>
            }
        </div>
    </div>
</div>

@section Styles {
    <style>
        .kpi-card { border-left: 4px solid #0d6efd; }
        .kpi-label { font-size: .85rem; color: #6c757d; }
        .kpi-value { font-size: 1.4rem; font-weight: 600; }
        .product-card .card-title { font-weight: 600; }
        .product-card .btn { white-space: nowrap; }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('click', function (e) {
            const btn = e.target.closest('.btn-test-conn');
            if (!btn) return;
            const id = btn.getAttribute('data-id');
            if (!id || btn.disabled) return;
            const baseUrl = '@(ViewBag.ApiBaseUrl ?? "http://localhost:7001/")'.replace(/\/$/, '');
            const url = `${baseUrl}/api/products/${id}/test-connection`;
            btn.disabled = true; const old = btn.innerHTML; btn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Testing';
            fetch(url).then(r => r.json()).then(data => {
                alert((data.success ? 'Success: ' : 'Failed: ') + (data.message || ''));
            }).catch(() => alert('Failed: Error calling API')).finally(() => { btn.disabled = false; btn.innerHTML = old; });
        });
    </script>
}

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add product</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="addProductNotice" class="alert d-none" role="alert"></div>
        <form id="addProductForm" class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Name</label>
            <input name="Name" class="form-control" required />
          </div>
          <div class="col-md-6">
            <label class="form-label">Database Technology</label>
            <select name="DatabaseTechnology" class="form-select" required>
              <option value="SqlServer">SqlServer</option>
            </select>
          </div>
          <div class="col-12">
            <label class="form-label">Description</label>
            <input name="Description" class="form-control" />
          </div>
          <div class="col-12">
            <label class="form-label">Connection String</label>
            <input name="ConnectionString" class="form-control" required />
          </div>
          <div class="col-md-6">
            <label class="form-label">Global Seed</label>
            <input name="GlobalSeed" class="form-control" />
          </div>
          <div class="col-md-3">
            <label class="form-label">Batch Size</label>
            <input name="BatchSize" type="number" class="form-control" value="2000" />
          </div>
          <div class="col-md-3">
            <label class="form-label">SQL Batch Size</label>
            <input name="SqlBatchSize" type="number" class="form-control" value="500" />
          </div>
          <div class="col-md-3">
            <label class="form-label">Threads</label>
            <input name="ParallelThreads" type="number" class="form-control" value="8" />
          </div>
          <div class="col-md-3">
            <label class="form-label">Max Cache Size</label>
            <input name="MaxCacheSize" type="number" class="form-control" value="500000" />
          </div>
          <div class="col-md-3">
            <label class="form-label">Command Timeout (s)</label>
            <input name="CommandTimeoutSeconds" type="number" class="form-control" value="600" />
          </div>
          <div class="col-md-9">
            <label class="form-label">Mapping Cache Directory</label>
            <input name="MappingCacheDirectory" class="form-control" value="mappings/" />
          </div>
          <div class="col-12">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="true" id="IsActive" checked>
              <label class="form-check-label" for="IsActive">Active</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" id="btnCreateProduct" class="btn btn-primary">Create</button>
      </div>
    </div>
  </div>
</div>

@section Scripts2 {
  <script>
    (function(){
      const btn = document.getElementById('btnCreateProduct');
      if (!btn) return;
      btn.addEventListener('click', function(){
        const form = document.getElementById('addProductForm');
        const fd = new FormData(form);
        const body:any = {};
        fd.forEach((v,k)=> body[k]=v);
        body.IsActive = (document.getElementById('IsActive') as HTMLInputElement).checked;
        const baseUrl = '@(ViewBag.ApiBaseUrl ?? "http://localhost:7001/")'.replace(/\/$/, '');
        fetch(`${baseUrl}/api/products`, {
          method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body)
        }).then(r=>{
          const notice = document.getElementById('addProductNotice');
          if (r.ok){ notice.className='alert alert-success'; notice.textContent='Product created'; setTimeout(()=>location.reload(), 800); }
          else { notice.className='alert alert-danger'; notice.textContent='Failed to create product'; }
          notice.classList.remove('d-none');
        }).catch(()=>{
          const notice = document.getElementById('addProductNotice');
          notice.className='alert alert-danger'; notice.textContent='Failed to create product'; notice.classList.remove('d-none');
        });
      });
    })();
  </script>
}
