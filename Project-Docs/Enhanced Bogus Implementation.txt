using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Security.Cryptography;
using System.Text;
using Bogus;
using Bogus.DataSets;

namespace DataObfuscation.Enhanced
{
    /// <summary>
    /// Enhanced deterministic provider that leverages Bogus's built-in Australian datasets
    /// while maintaining deterministic behavior for data obfuscation
    /// </summary>
    public class EnhancedDeterministicAustralianProvider
    {
        private readonly string _globalSeed;
        private readonly ConcurrentDictionary<string, string> _valueCache;
        private readonly int _maxCacheSize;
        
        // Bogus instances with Australian locale
        private readonly Faker _australianFaker;
        private readonly Name _nameProvider;
        private readonly Address _addressProvider;
        private readonly Phone _phoneProvider;
        private readonly Internet _internetProvider;
        private readonly Company _companyProvider;

        public EnhancedDeterministicAustralianProvider(string globalSeed, int maxCacheSize = 1000000)
        {
            _globalSeed = globalSeed;
            _maxCacheSize = maxCacheSize;
            _valueCache = new ConcurrentDictionary<string, string>();
            
            // Initialize Bogus with Australian locale
            _australianFaker = new Faker("en_AU");
            _nameProvider = new Name("en_AU");
            _addressProvider = new Address("en_AU");
            _phoneProvider = new Phone("en_AU");
            _internetProvider = new Internet("en_AU");
            _companyProvider = new Company("en_AU");
        }

        /// <summary>
        /// Generate deterministic hash for consistent seed generation
        /// </summary>
        private string GenerateDeterministicHash(string input, string dataType, string customSeed = null)
        {
            var seedToUse = customSeed ?? _globalSeed;
            var combined = $"{seedToUse}:{dataType}:{input}";
            
            using var sha256 = SHA256.Create();
            var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(combined));
            return Convert.ToBase64String(hashBytes);
        }

        /// <summary>
        /// Get seeded Random instance for deterministic generation
        /// </summary>
        private Random GetSeededRandom(string input, string dataType, string customSeed = null)
        {
            var hash = GenerateDeterministicHash(input, dataType, customSeed);
            var seed = Math.Abs(hash.GetHashCode());
            return new Random(seed);
        }

        /// <summary>
        /// Cache management for deterministic values
        /// </summary>
        public string GetCachedOrGenerate(string originalValue, string dataType, Func<Random, string> generator, string customSeed = null)
        {
            if (string.IsNullOrEmpty(originalValue))
                return originalValue;

            var cacheKey = $"{dataType}:{customSeed ?? _globalSeed}:{originalValue}";
            
            return _valueCache.GetOrAdd(cacheKey, _ =>
            {
                // Manage cache size
                if (_valueCache.Count > _maxCacheSize)
                {
                    var keysToRemove = _valueCache.Keys.Take(_maxCacheSize / 10).ToList();
                    foreach (var key in keysToRemove)
                    {
                        _valueCache.TryRemove(key, out _);
                    }
                }
                
                var seededRandom = GetSeededRandom(originalValue, dataType, customSeed);
                return generator(seededRandom);
            });
        }

        // Enhanced Australian data generation using Bogus datasets
        public string GetFirstName(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "FirstName", (random) =>
            {
                // Use Bogus's deterministic generation with our seeded random
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                return tempFaker.Name.FirstName();
            }, customSeed);
        }

        public string GetLastName(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "LastName", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                return tempFaker.Name.LastName();
            }, customSeed);
        }

        public string GetFullName(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "FullName", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                return tempFaker.Name.FullName();
            }, customSeed);
        }

        public string GetAustralianEmail(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "Email", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                // Generate realistic Australian email
                var firstName = tempFaker.Name.FirstName().ToLower();
                var lastName = tempFaker.Name.LastName().ToLower();
                
                // Australian email domains (enhanced list)
                var auDomains = new[] 
                {
                    "gmail.com", "hotmail.com", "outlook.com", "bigpond.com",
                    "optusnet.com.au", "telstra.com", "yahoo.com.au", "iinet.net.au",
                    "tpg.com.au", "westnet.com.au", "dodo.com.au", "aussiebroadband.com.au"
                };
                
                var domain = tempFaker.Random.ArrayElement(auDomains);
                var pattern = tempFaker.Random.ArrayElement(new[]
                {
                    $"{firstName}.{lastName}",
                    $"{firstName[0]}{lastName}",
                    $"{firstName}{lastName[0]}",
                    $"{firstName}{tempFaker.Random.Number(10, 99)}"
                });
                
                return $"{pattern}@{domain}";
            }, customSeed);
        }

        public string GetAustralianPhone(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "Phone", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                // Use Bogus's phone generation with Australian formatting
                var phone = tempFaker.Phone.PhoneNumber();
                
                // Ensure proper Australian format
                if (tempFaker.Random.Bool())
                {
                    // Mobile format: 04XX XXX XXX
                    return $"04{tempFaker.Random.Number(10, 99)} {tempFaker.Random.Number(100, 999)} {tempFaker.Random.Number(100, 999)}";
                }
                else
                {
                    // Landline format: (0X) XXXX XXXX
                    var areaCodes = new[] { "02", "03", "07", "08" };
                    var area = tempFaker.Random.ArrayElement(areaCodes);
                    return $"({area}) {tempFaker.Random.Number(1000, 9999)} {tempFaker.Random.Number(1000, 9999)}";
                }
            }, customSeed);
        }

        public string GetAustralianAddress(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "Address", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                // Use Bogus's address generation enhanced for Australia
                return tempFaker.Address.StreetAddress();
            }, customSeed);
        }

        public string GetAustralianSuburb(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "Suburb", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                // Use Bogus's city generation (closest to suburb)
                return tempFaker.Address.City();
            }, customSeed);
        }

        public string GetAustralianState(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "State", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                // Australian states and territories
                var states = new[] { "NSW", "VIC", "QLD", "WA", "SA", "TAS", "NT", "ACT" };
                return tempFaker.Random.ArrayElement(states);
            }, customSeed);
        }

        public string GetAustralianPostcode(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "Postcode", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                // Use Bogus's zip code generation adapted for Australia
                return tempFaker.Address.ZipCode();
            }, customSeed);
        }

        public string GetABN(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "ABN", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                // Generate valid-format ABN (11 digits)
                return tempFaker.Random.Replace("###########"); // 11 digits
            }, customSeed);
        }

        public string GetTFN(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "TFN", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                // Generate valid-format TFN (9 digits)
                return tempFaker.Random.Replace("#########"); // 9 digits
            }, customSeed);
        }

        // Additional Australian-specific data types using Bogus
        public string GetAustralianCompanyName(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "CompanyName", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                return tempFaker.Company.CompanyName();
            }, customSeed);
        }

        public string GetAustralianJobTitle(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "JobTitle", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                return tempFaker.Name.JobTitle();
            }, customSeed);
        }

        public string GetAustralianCreditCard(string originalValue, string customSeed = null)
        {
            return GetCachedOrGenerate(originalValue, "CreditCard", (random) =>
            {
                var tempFaker = new Faker("en_AU");
                tempFaker.Random = new Randomizer(random.Next());
                
                return tempFaker.Finance.CreditCardNumber();
            }, customSeed);
        }

        // Utility methods
        public Dictionary<string, string> GetAllMappings()
        {
            return new Dictionary<string, string>(_valueCache);
        }

        public void LoadMappings(Dictionary<string, string> mappings)
        {
            _valueCache.Clear();
            foreach (var mapping in mappings)
            {
                _valueCache.TryAdd(mapping.Key, mapping.Value);
            }
        }

        public void ClearCache()
        {
            _valueCache.Clear();
        }

        /// <summary>
        /// Get available Bogus locales for validation
        /// </summary>
        public static string[] GetAvailableLocales()
        {
            return Database.GetAllLocales().ToArray();
        }

        /// <summary>
        /// Validate if Australian locale is available
        /// </summary>
        public static bool IsAustralianLocaleAvailable()
        {
            return Database.GetAllLocales().Contains("en_AU");
        }
    }

    /// <summary>
    /// Performance-optimized data type mapping
    /// </summary>
    public static class DataTypeMapper
    {
        private static readonly Dictionary<string, Func<EnhancedDeterministicAustralianProvider, string, string, string>> _mappings = 
            new(StringComparer.OrdinalIgnoreCase)
            {
                ["australianfirstname"] = (provider, original, seed) => provider.GetFirstName(original, seed),
                ["australianlastname"] = (provider, original, seed) => provider.GetLastName(original, seed),
                ["australianfullname"] = (provider, original, seed) => provider.GetFullName(original, seed),
                ["australianemail"] = (provider, original, seed) => provider.GetAustralianEmail(original, seed),
                ["australianphone"] = (provider, original, seed) => provider.GetAustralianPhone(original, seed),
                ["australianaddress"] = (provider, original, seed) => provider.GetAustralianAddress(original, seed),
                ["australiansuburb"] = (provider, original, seed) => provider.GetAustralianSuburb(original, seed),
                ["australianstate"] = (provider, original, seed) => provider.GetAustralianState(original, seed),
                ["australianpostcode"] = (provider, original, seed) => provider.GetAustralianPostcode(original, seed),
                ["abn"] = (provider, original, seed) => provider.GetABN(original, seed),
                ["tfn"] = (provider, original, seed) => provider.GetTFN(original, seed),
                ["australiancompany"] = (provider, original, seed) => provider.GetAustralianCompanyName(original, seed),
                ["australianjobtitle"] = (provider, original, seed) => provider.GetAustralianJobTitle(original, seed),
                ["australiancreditcard"] = (provider, original, seed) => provider.GetAustralianCreditCard(original, seed)
            };

        public static string GenerateValue(
            EnhancedDeterministicAustralianProvider provider, 
            string dataType, 
            string originalValue, 
            string customSeed = null)
        {
            if (_mappings.TryGetValue(dataType, out var mapper))
            {
                return mapper(provider, originalValue, customSeed);
            }
            
            throw new NotSupportedException($"Data type '{dataType}' is not supported");
        }

        public static string[] GetSupportedDataTypes()
        {
            return _mappings.Keys.ToArray();
        }
    }
}